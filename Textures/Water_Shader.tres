[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

uniform vec2 amplitude = vec2(0.2, 0.1);
uniform vec2 frequency = vec2(3.0, 2.5);
uniform vec2 time_factor = vec2(2.0, 3.0);

uniform sampler2D textureMap : hint_albedo;
uniform vec2 texture_scale = vec2(8.0, 4.0); 

uniform sampler2D uv_offset_texture : hint_black;
uniform vec2 uv_offset_scale = vec2(0.2, 0.2);
uniform float uv_offset_time_scale = 0.05;
uniform float uv_offset_amplitude = 0.2;

float height(vec2 pos, float time){
	return sin(amplitude.x * sin(pos.x * frequency.x + time * time_factor.x) ) + sin(amplitude.y * sin(pos.y * frequency.y + time * time_factor.y));
	
}

void vertex(){
	VERTEX.y += height(VERTEX.xz, TIME);
	
	TANGENT = normalize(vec3(0.0, height(VERTEX.xz + vec2(0.0, 0.2), TIME) - height(VERTEX.xz + vec2(0.0, -0.2), TIME), 0.4));
	BINORMAL = normalize(vec3(0.4, height(VERTEX.xz + vec2(0.2, 0.0), TIME) - height(VERTEX.xz + vec2(-0.0, 0.0), TIME), 0.0));
	NORMAL = cross(TANGENT,BINORMAL);
}

void fragment(){
	ALBEDO = texture(textureMap, UV * texture_scale).rgb;
	
	if(ALBEDO.r > 0.9 && ALBEDO.g > 0.9 && ALBEDO.b > 0.9){
		ALPHA = 0.9
	} else {
		ALPHA = 0.5;
	}
	
	METALLIC = 0.5;
	ROUGHNESS = 0.2;
}"
